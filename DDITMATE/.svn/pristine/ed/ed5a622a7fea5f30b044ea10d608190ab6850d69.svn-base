<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- 이 영역에 sql문에 맞는 태그를 사용하여 SQL문을 기술한다. 사용할 수 있는 기본적인 태그들 <select> ~~~ 
		</select> <insert> ~~~ </insert> <update> ~~~ </update> <delete> ~~~ </delete> 
		위 태그에서 사용되는 주요 속성들 1) id : 해당 태그를 호출할 때 namespace명과 연결하여 사용하는 아이디 2) parameterType 
		: SQL문에 사용될 데이터가 들어있는 객체 타입을 지정함. (보통 VO클래스, 자바의 자료형이름 등이 사용된다.) (typeAlias로 
		지정한 alias명을 사용할 수 있다.) 3) resultType : select문을 실행한 결과를 담을 객체타입을 지정한다. (보통 
		VO클래스, 자바의 자료형이름 등이 사용된다.) (typeAlias로 지정한 alias명을 사용할 수 있다.) 4) resultMap 
		: 결과 레코드 컬럼명과 VO객체의 속성명이 다를 경우에 적절한 매핑을 위해 사용한다. -->
	<resultMap type="memberVO" id="memMap">
		<result column="mem_id" property="memId" />
		<result column="mem_pw" property="memPw" />
		<result column="mem_name" property="memName" />
		<result column="mem_email" property="memEmail" />
		<result column="mem_birth" property="memBirth" />
		<result column="mem_tel" property="memTel" />
		<result column="mem_date" property="memDate" />
		<result column="mem_nick" property="memNick" />
		<result column="mem_intro" property="memIntro" />
	</resultMap>

	<resultMap type="pictureVO" id="picMap">
		<result column="mem_id" property="memId" />
		<result column="orignl_pic" property="orignlPic" />
		<result column="save_pic" property="savePic" />
		<result column="postdate" property="postdate" />
	</resultMap>

	<insert id="insertPicture" parameterType="member.vo.PictureVO">

		INSERT INTO
		member_picture
		( mem_id, orignl_pic, save_pic, postdate)
		VALUES (#{memId}, #{orignlPic}, #{savePic}, sysdate)

	</insert>

	<insert id="insertMember" parameterType="member.vo.MemberVO">

		insert into member
		(mem_id, mem_pw, mem_name, mem_email, mem_birth, mem_tel, mem_date,
		mem_nick, mem_intro)
		values (#{memId}, #{memPw}, #{memName},
		#{memEmail}, #{memBirth}, #{memTel}, #{memDate}, #{memNick},
		#{memIntro})
	</insert>

	<update id="updateMember" parameterType="member.vo.MemberVO">

		UPDATE member
		<trim prefix="SET" suffixOverrides=",">
			<if test="memPw != null and memPw != ''">mem_pw = #{memPw},</if>
			mem_email = #{memEmail},
			mem_tel = #{memTel},
			mem_date = #{memDate}
		</trim>
		WHERE mem_id = #{memId}

	</update>

	<update id="updatePicture" parameterType="PictureVO">

		UPDATE member_picture
		SET
		ORIGNL_PIC = #{orignlPic},
		SAVE_PIC = #{savePic}
		where mem_id = #{memId}

	</update>

	<update id="updateProfile" parameterType="hashMap">

		UPDATE member
		SET
		MEM_NICK = #{memNick},
		MEM_INTRO = #{memIntro}
		where mem_id= #{memId}

	</update>

	<delete id="deleteMember" parameterType="String">

		delete from member
		where mem_id = #{memId}

	</delete>



	<!-- <select id="selectAllMember" resultMap="memMap"> -->
	<select id="selectAllMember" resultMap="memMap">

		<!-- VO 필드명으로 as 해줘야 맵핑 됌 -->
		<!-- select mem_id as memId, mem_name as memName, mem_tel as memTel, mem_addr 
			as memAddr from member -->
		select * from member


	</select>

	<select id="getMember" parameterType="String" resultMap="memMap">

		select *
		from member
		where mem_id = #{memId}

	</select>

	<!-- parameterType 데이터가 1개일 경우 생략가능 -->
	<select id="checkMember" parameterType="String" resultType="int">

		select count(*) as cnt from member
		where mem_id = #{memId}

	</select>

	<select id="searchMember" resultMap="memMap">

		select * from member where 1=1

		<if test="memId != null and memId != ''">
			and mem_id = #{memId}
		</if>

		<if test="memName != null and memName != ''">
			and mem_name = #{memName}
		</if>

		<if test="memTel != null and memTel != ''">
			and mem_tel = #{memTel}
		</if>

		<if test="memAddr != null and memAddr != ''">
			and mem_addr like '%' || #{memAddr} || '%'
		</if>


	</select>

	<select id="getPicture" resultMap="picMap">
		SELECT * FROM member_picture
		where mem_id = #{memId}
	</select>
</mapper>